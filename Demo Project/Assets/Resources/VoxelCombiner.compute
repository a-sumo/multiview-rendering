#pragma kernel CombineVoxels

RWTexture3D<float4> volumeTexture : register(u0);
Texture2D<float4> inputTexture : register(t0);
uint3 volumeTextureSize;
uint2 inputTextureSize;

uint viewIndex;

float3 GetUVW(uint3 id, float depth)
{
    float3 uvw = float3(0, 0, 0);
    
    switch (viewIndex)
    {
        case 0: // NX
            uvw = float3(1 - depth, id.y / inputTextureSize.y, id.z / inputTextureSize.x);
            break;
        case 1: // NY
            uvw = float3(id.x / inputTextureSize.x, 1 - depth, 1 - id.z / inputTextureSize.y);
            break;
        case 2: // NZ
            uvw = float3(id.x / inputTextureSize.x, id.y / inputTextureSize.y, 1 - depth);
            break;
        case 3: // PX
            uvw = float3(depth, 1 - id.y / inputTextureSize.y, id.z / inputTextureSize.x);
            break;
        case 4: // PY
            uvw = float3(1 - id.z / inputTextureSize.y, depth, id.x / inputTextureSize.x);
            break;
        case 5: // PZ
            uvw = float3(id.x / inputTextureSize.x, 1 - id.y / inputTextureSize.y, depth);
            break;
    }
    
    return uvw;
}

[numthreads(8, 8, 8)]
void CombineVoxels(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= volumeTextureSize.x || id.y >= volumeTextureSize.y || id.z >= volumeTextureSize.z)
        return;

    float4 existingColor = volumeTexture[id];
    float4 newColor = inputTexture.Load(uint3(id.z, id.y, 0));
    float depth = 1 - newColor.a;
    
    float3 uvw = GetUVW(id, depth);
    
    if (uvw.x >= 0 && uvw.x <= 1 && uvw.y >= 0 && uvw.y <= 1 && uvw.z >= 0 && uvw.z <= 1)
    {
        if (existingColor.a == 0)
        {
            volumeTexture[id] = float4(newColor.rgb, depth);
        }
        else
        {
            float totalAlpha = existingColor.a + depth;
            float4 combinedColor = float4(
                (existingColor.r * existingColor.a + newColor.r * depth) / totalAlpha,
                (existingColor.g * existingColor.a + newColor.g * depth) / totalAlpha,
                (existingColor.b * existingColor.a + newColor.b * depth) / totalAlpha,
                totalAlpha
            );
            volumeTexture[id] = combinedColor;
        }
    }
}
