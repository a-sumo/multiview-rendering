#pragma kernel ProcessView

RWTexture3D<float4> OutputTexture : register(u0);
Texture2D<float4> InputTexture : register(t0);
uint ViewType : register(c0);
float Padding : register(c1);
float TextureSize : register(c2);

[numthreads(16, 16, 1)]
void ProcessView(uint3 id : SV_DispatchThreadID)
{
    uint x = id.x;
    uint y = id.y;
    
    if (x >= Padding && x < TextureSize - Padding &&
        y >= Padding && y < TextureSize - Padding)
    {
        float4 pixelColor = InputTexture.Load(float3(x, y, 0));
        float depth = 1.0 - pixelColor.a;
        
        uint3 voxelCoord;
        float4 voxelColor;
        
        switch (ViewType)
        {
            case 0: // NX View
                voxelCoord = uint3(TextureSize - 1 - (uint)(depth * (TextureSize - 1)), y, x);
                voxelColor = float4(pixelColor.rgb, depth);
                break;
            case 1: // NY View
                voxelCoord = uint3(y, TextureSize - 1 - (uint)(depth * (TextureSize - 1)), TextureSize - 1 - x);
                voxelColor = float4(pixelColor.rgb, depth);
                break;
            case 2: // NZ View
                voxelCoord = uint3(x, y, (uint)(depth * (TextureSize - 1)));
                voxelColor = float4(pixelColor.rgb, depth);
                break;
            case 3: // PX View
                voxelCoord = uint3((uint)(depth * (TextureSize - 1)), TextureSize - 1 - y, x);
                voxelColor = float4(pixelColor.rgb, depth);
                break;
            case 4: // PY View
                voxelCoord = uint3(TextureSize - 1 - x, (uint)(depth * (TextureSize - 1)), y);
                voxelColor = float4(pixelColor.rgb, depth);
                break;
            case 5: // PZ View
                voxelCoord = uint3(x, TextureSize - 1 - y, TextureSize - 1 - (uint)(depth * (TextureSize - 1)));
                voxelColor = float4(pixelColor.rgb, depth);
                break;
        }
        
        if (voxelCoord.x < TextureSize && voxelCoord.y < TextureSize && voxelCoord.z < TextureSize)
        {
            OutputTexture[voxelCoord] = voxelColor;
        }
    }
}
